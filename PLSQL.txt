
SELECT  INTO :   It is the fatest way to fetch a single row from a table into variable(S). 

1)  Single Column  (declaring variable)

DECLARE
  l_customer_name customers.name%TYPE;
BEGIN

  SELECT 
         name 
  INTO 
         l_customer_name
  FROM customers
  WHERE customer_id = 100;

 
  dbms_output.put_line( l_customer_name );
END;


2)  Single ROW  (declaring record)

DECLARE
  l_customer_name customers%ROWTYPE;
BEGIN

  SELECT 
         * 
  INTO 
         l_customer_name
  FROM customers
  WHERE customer_id = 100;

 
  dbms_output.put_line( l_customer_name );
END;





PROCEDURE :   It's basically a resuable unit that encapsulates specific business logic of an application.



CREATE OR REPLACE PROCEDURE print_contact(
    p_customer_id NUMBER 
)
IS
  r_contact contacts%ROWTYPE;
BEGIN
 
  SELECT *
  INTO r_contact
  FROM contacts
  WHERE customer_id = p_customer_id;


  dbms_output.put_line( r_contact.first_name || ' ' ||
  r_contact.last_name || '<' || r_contact.email ||'>' );


END;



To compile the procedure, click the Run Statement button.

If the procedure is compiled successfully, you will find the new procedure under the Procedures node.

EXEC print_contact(100);







FUNCTION   :     SAME as procedure, just that it is used to perform certain mathemtical operation and return the result to the caller program.

CREATE OR REPLACE  FUNCTION   TOTAL_SALES  ( YR NUMBER )

RETURN NUMBER

IS

  l_total_sales NUMBER := 0;

BEGIN
        select 
		       sum (unit*price)
		INTO
		       l_total_sales
        from
               table1 
	    join
		        table 2
		where status = 'shipped';
		GROUP BY EXTRACT (YEAR FROM ORDER DATE)
		HAVING EXTRACT(YEAR FROM order_date) = YR;
		
	RETURN  l_total_sales
		      
END;


CALLING :

BEGIN
    l_sales_2017 := TOTAL_SALES (2017);
    DBMS_OUTPUT.PUT_LINE('Sales 2017: ' || l_sales_2017);
END;







CURSOR   :

1) IMPLICIT CURSOR :

DECLARE  
   total_rows number(2); 
BEGIN 
   UPDATE customers 
   SET salary = salary + 500; 
   IF sql%notfound THEN 
      dbms_output.put_line('no customers selected'); 
   ELSIF sql%found THEN 
      total_rows := sql%rowcount;
      dbms_output.put_line( total_rows || ' customers selected '); 
   END IF;  
END; 
/      


2) EXPLICIT CURSOR :

DECLARE 
   c_id customers.id%type; 
   c_name customers.name%type; 
   c_addr customers.address%type; 
   CURSOR c_customers is 
      SELECT id, name, address FROM customers; 
BEGIN 
   OPEN c_customers; 
   LOOP 
   FETCH c_customers into c_id, c_name, c_addr; 
      EXIT WHEN c_customers%notfound; 
      dbms_output.put_line(c_id || ' ' || c_name || ' ' || c_addr); 
   END LOOP; 
   CLOSE c_customers; 
END; 
/




TRIGGER :

CREATE table audit (id generated by default PRIMARY KEY, table_name varchar2(50), operation_Type varchar2(50), user_detail varchar2(10), DATE_TIME DATE );



CREATE TRIGGER TRG
AFTER
UPDATE OR DELETE
ON CUSTOMER
FOR EACH ROW
ENABLE

DECLARE

type VARCHAR2(20)

BEGIN

  type := CASE
  
  WHEN updating then 'UPDATE' 
  WHEN deleting then 'DELETE'
  
  END;
  
  insert into audit (table_name,operation_Type,user_detail ,DATE_TIME  ) VALUES (CUSTOMER, type , USER , sysdate);


END ;
/



update customers
set salary = salary + 50000
where id = 2652198


select * from audit;






EXCEPTION HANDLING  :








PACKAGE  :       ????

WINDOWS function - 2

INTERVIEW QUESTION - 2 links

Views , index



SQL






























